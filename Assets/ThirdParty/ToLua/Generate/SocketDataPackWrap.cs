//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SocketDataPackWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SocketDataPack), typeof(System.Object));
		L.RegFunction("GetBuff", GetBuff);
		L.RegFunction("Unpack", Unpack);
		L.RegFunction("New", _CreateSocketDataPack);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("HEAD_DATA_LEN", get_HEAD_DATA_LEN, set_HEAD_DATA_LEN);
		L.RegVar("HEAD_TYPE_LEN", get_HEAD_TYPE_LEN, set_HEAD_TYPE_LEN);
		L.RegVar("Type", get_Type, set_Type);
		L.RegVar("Data", get_Data, set_Data);
		L.RegVar("Buff", get_Buff, set_Buff);
		L.RegVar("HEAD_LEN", get_HEAD_LEN, null);
		L.RegVar("BuffLength", get_BuffLength, null);
		L.RegVar("DataLength", get_DataLength, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSocketDataPack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SocketDataPack obj = new SocketDataPack();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				SocketDataPack obj = new SocketDataPack(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SocketDataPack.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] o = SocketDataPack.GetBuff(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unpack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			SocketDataPack o = SocketDataPack.Unpack(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HEAD_DATA_LEN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, SocketDataPack.HEAD_DATA_LEN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HEAD_TYPE_LEN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, SocketDataPack.HEAD_TYPE_LEN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			ushort ret = obj.Type;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			byte[] ret = obj.Data;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Buff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			byte[] ret = obj.Buff;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Buff on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HEAD_LEN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, SocketDataPack.HEAD_LEN);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BuffLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			int ret = obj.BuffLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BuffLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			int ret = obj.DataLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HEAD_DATA_LEN(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			SocketDataPack.HEAD_DATA_LEN = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HEAD_TYPE_LEN(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			SocketDataPack.HEAD_TYPE_LEN = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.Type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Buff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketDataPack obj = (SocketDataPack)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Buff = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Buff on a nil value");
		}
	}
}

