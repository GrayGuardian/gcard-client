//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SocketServerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SocketServer), typeof(System.Object));
		L.RegFunction("Send", Send);
		L.RegFunction("KickOut", KickOut);
		L.RegFunction("KickOutAll", KickOutAll);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateSocketServer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IP", get_IP, set_IP);
		L.RegVar("Port", get_Port, set_Port);
		L.RegVar("ClientInfoDic", get_ClientInfoDic, set_ClientInfoDic);
		L.RegVar("OnConnect", get_OnConnect, set_OnConnect);
		L.RegVar("OnDisconnect", get_OnDisconnect, set_OnDisconnect);
		L.RegVar("OnReceive", get_OnReceive, set_OnReceive);
		L.RegVar("OnSend", get_OnSend, set_OnSend);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSocketServer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				SocketServer obj = new SocketServer(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SocketServer.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
				System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
				ushort arg1 = (ushort)LuaDLL.luaL_checknumber(L, 3);
				obj.Send(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
				System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
				ushort arg1 = (ushort)LuaDLL.luaL_checknumber(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				obj.Send(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
				System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
				ushort arg1 = (ushort)LuaDLL.luaL_checknumber(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				System.Action<SocketDataPack> arg3 = (System.Action<SocketDataPack>)ToLua.CheckDelegate<System.Action<SocketDataPack>>(L, 5);
				obj.Send(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SocketServer.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KickOut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
			System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
			obj.KickOut(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KickOutAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
			obj.KickOutAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketServer obj = (SocketServer)ToLua.CheckObject<SocketServer>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			string ret = obj.IP;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClientInfoDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			System.Collections.Generic.Dictionary<System.Net.Sockets.Socket,SocketInfo> ret = obj.ClientInfoDic;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClientInfoDic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnect(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Net.Sockets.Socket>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnect(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Net.Sockets.Socket>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReceive(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Net.Sockets.Socket,SocketDataPack>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnSend(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Net.Sockets.Socket,SocketDataPack>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.IP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Port = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClientInfoDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketServer obj = (SocketServer)o;
			System.Collections.Generic.Dictionary<System.Net.Sockets.Socket,SocketInfo> arg0 = (System.Collections.Generic.Dictionary<System.Net.Sockets.Socket,SocketInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<System.Net.Sockets.Socket,SocketInfo>));
			obj.ClientInfoDic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClientInfoDic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnect(IntPtr L)
	{
		try
		{
			SocketServer obj = (SocketServer)ToLua.CheckObject(L, 1, typeof(SocketServer));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketServer.OnConnect' can only appear on the left hand side of += or -= when used outside of the type 'SocketServer'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Net.Sockets.Socket> ev = (System.Action<System.Net.Sockets.Socket>)arg0.func;
				obj.OnConnect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Net.Sockets.Socket> ev = (System.Action<System.Net.Sockets.Socket>)arg0.func;
				obj.OnConnect -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnect(IntPtr L)
	{
		try
		{
			SocketServer obj = (SocketServer)ToLua.CheckObject(L, 1, typeof(SocketServer));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketServer.OnDisconnect' can only appear on the left hand side of += or -= when used outside of the type 'SocketServer'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Net.Sockets.Socket> ev = (System.Action<System.Net.Sockets.Socket>)arg0.func;
				obj.OnDisconnect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Net.Sockets.Socket> ev = (System.Action<System.Net.Sockets.Socket>)arg0.func;
				obj.OnDisconnect -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReceive(IntPtr L)
	{
		try
		{
			SocketServer obj = (SocketServer)ToLua.CheckObject(L, 1, typeof(SocketServer));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketServer.OnReceive' can only appear on the left hand side of += or -= when used outside of the type 'SocketServer'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Net.Sockets.Socket,SocketDataPack> ev = (System.Action<System.Net.Sockets.Socket,SocketDataPack>)arg0.func;
				obj.OnReceive += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Net.Sockets.Socket,SocketDataPack> ev = (System.Action<System.Net.Sockets.Socket,SocketDataPack>)arg0.func;
				obj.OnReceive -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnSend(IntPtr L)
	{
		try
		{
			SocketServer obj = (SocketServer)ToLua.CheckObject(L, 1, typeof(SocketServer));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketServer.OnSend' can only appear on the left hand side of += or -= when used outside of the type 'SocketServer'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Net.Sockets.Socket,SocketDataPack> ev = (System.Action<System.Net.Sockets.Socket,SocketDataPack>)arg0.func;
				obj.OnSend += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Net.Sockets.Socket,SocketDataPack> ev = (System.Action<System.Net.Sockets.Socket,SocketDataPack>)arg0.func;
				obj.OnSend -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

