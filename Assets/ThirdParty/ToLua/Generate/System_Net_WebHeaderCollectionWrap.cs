//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_WebHeaderCollectionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.WebHeaderCollection), typeof(System.Collections.Specialized.NameValueCollection));
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Add", Add);
		L.RegFunction("Set", Set);
		L.RegFunction("Remove", Remove);
		L.RegFunction("GetValues", GetValues);
		L.RegFunction("ToString", ToString);
		L.RegFunction("ToByteArray", ToByteArray);
		L.RegFunction("IsRestricted", IsRestricted);
		L.RegFunction("OnDeserialization", OnDeserialization);
		L.RegFunction("GetObjectData", GetObjectData);
		L.RegFunction("Get", Get);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("GetKey", GetKey);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateSystem_Net_WebHeaderCollection);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Count", get_Count, null);
		L.RegVar("Keys", get_Keys, null);
		L.RegVar("AllKeys", get_AllKeys, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Net_WebHeaderCollection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Net.WebHeaderCollection obj = new System.Net.WebHeaderCollection();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.Net.WebHeaderCollection.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: System.Net.WebHeaderCollection.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: System.Net.WebHeaderCollection.this");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj[arg0];
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.get_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.set_Item");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Add(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Specialized.NameValueCollection>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Collections.Specialized.NameValueCollection arg0 = (System.Collections.Specialized.NameValueCollection)ToLua.ToObject(L, 2);
				obj.Add(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.Add");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Set(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Set(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Set(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.Set");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpRequestHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpRequestHeader arg0 = (System.Net.HttpRequestHeader)ToLua.ToObject(L, 2);
				obj.Remove(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Net.HttpResponseHeader>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				System.Net.HttpResponseHeader arg0 = (System.Net.HttpResponseHeader)ToLua.ToObject(L, 2);
				obj.Remove(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Remove(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.Remove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValues(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string[] o = obj.GetValues(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string[] o = obj.GetValues(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.GetValues");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToByteArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			byte[] o = obj.ToByteArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRestricted(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool o = System.Net.WebHeaderCollection.IsRestricted(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = System.Net.WebHeaderCollection.IsRestricted(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.IsRestricted");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeserialization(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnDeserialization(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObjectData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			System.Runtime.Serialization.SerializationInfo arg0 = (System.Runtime.Serialization.SerializationInfo)ToLua.CheckObject(L, 2, typeof(System.Runtime.Serialization.SerializationInfo));
			System.Runtime.Serialization.StreamingContext arg1 = StackTraits<System.Runtime.Serialization.StreamingContext>.Check(L, 3);
			obj.GetObjectData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.Get(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.Get(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebHeaderCollection.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			System.Collections.IEnumerator o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetKey(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Keys(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)o;
			System.Collections.Specialized.NameObjectCollectionBase.KeysCollection ret = obj.Keys;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Keys on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllKeys(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebHeaderCollection obj = (System.Net.WebHeaderCollection)o;
			string[] ret = obj.AllKeys;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllKeys on a nil value");
		}
	}
}

