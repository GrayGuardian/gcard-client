//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SocketClient), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("ReConnect", ReConnect);
		L.RegFunction("Send", Send);
		L.RegFunction("DisConnect", DisConnect);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateSocketClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IP", get_IP, set_IP);
		L.RegVar("Port", get_Port, set_Port);
		L.RegVar("OnConnectSuccess", get_OnConnectSuccess, set_OnConnectSuccess);
		L.RegVar("OnConnectError", get_OnConnectError, set_OnConnectError);
		L.RegVar("OnDisconnect", get_OnDisconnect, set_OnDisconnect);
		L.RegVar("OnReceive", get_OnReceive, set_OnReceive);
		L.RegVar("OnSend", get_OnSend, set_OnSend);
		L.RegVar("OnError", get_OnError, set_OnError);
		L.RegVar("OnReConnectSuccess", get_OnReConnectSuccess, set_OnReConnectSuccess);
		L.RegVar("OnReConnectError", get_OnReConnectError, set_OnReConnectError);
		L.RegVar("OnReconnecting", get_OnReconnecting, set_OnReconnecting);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSocketClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				SocketClient obj = new SocketClient(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SocketClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				obj.Connect();
				return 0;
			}
			else if (count == 2)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.Connect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SocketClient.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReConnect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				obj.ReConnect();
				return 0;
			}
			else if (count == 2)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.ReConnect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.ReConnect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SocketClient.ReConnect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
				obj.Send(arg0);
				return 0;
			}
			else if (count == 3)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				obj.Send(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
				ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<SocketDataPack> arg2 = (System.Action<SocketDataPack>)ToLua.CheckDelegate<System.Action<SocketDataPack>>(L, 4);
				obj.Send(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SocketClient.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.DisConnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketClient obj = (SocketClient)o;
			string ret = obj.IP;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketClient obj = (SocketClient)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnectSuccess(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnectError(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnect(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReceive(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<SocketDataPack>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnSend(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<SocketDataPack>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnError(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Net.Sockets.SocketException>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReConnectSuccess(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<int>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReConnectError(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<int>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReconnecting(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<int>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketClient obj = (SocketClient)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.IP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SocketClient obj = (SocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Port = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnectSuccess(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnConnectSuccess' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectSuccess += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectSuccess -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnectError(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnConnectError' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectError += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnConnectError -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnect(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnDisconnect' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnDisconnect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.OnDisconnect -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReceive(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnReceive' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<SocketDataPack> ev = (System.Action<SocketDataPack>)arg0.func;
				obj.OnReceive += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<SocketDataPack> ev = (System.Action<SocketDataPack>)arg0.func;
				obj.OnReceive -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnSend(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnSend' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<SocketDataPack> ev = (System.Action<SocketDataPack>)arg0.func;
				obj.OnSend += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<SocketDataPack> ev = (System.Action<SocketDataPack>)arg0.func;
				obj.OnSend -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnError(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnError' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Net.Sockets.SocketException> ev = (System.Action<System.Net.Sockets.SocketException>)arg0.func;
				obj.OnError += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Net.Sockets.SocketException> ev = (System.Action<System.Net.Sockets.SocketException>)arg0.func;
				obj.OnError -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReConnectSuccess(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnReConnectSuccess' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReConnectSuccess += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReConnectSuccess -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReConnectError(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnReConnectError' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReConnectError += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReConnectError -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReconnecting(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnReconnecting' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReconnecting += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<int> ev = (System.Action<int>)arg0.func;
				obj.OnReconnecting -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

