-- 缩写
_G.UE = UnityEngine
_G.UEUI = UE.UI
_G.GameObject = UE.GameObject
_G.Application = UE.Application

_G.class = require('class')

require('utils')

_G.CSFileUtil = FileUtil.Instance
_G.CSEncryptUtil = EncryptUtil.Instance
_G.CSLuaUtil = LuaUtil.Instance

_G.GAME_CONST = require('GAME_CONST')
_G.BROADCAST_CODE = require('BROADCAST_CODE')
_G.Template = require('template')

_G.Middleware = require('middleware')
_G.DownloadFile = require('downloadFile')

_G.pb = require('pb_util'):new()
_G.asset = require('asset_util'):new()
_G.broadcast = require('broadcast_util'):new()
_G.mono = require('mono_util'):new()
_G.timer = require('timer_util'):new()
_G.pool = require('pool_util'):new()
_G.http = require('http_util'):new()

_G.compMgr = require('comp_mgr'):new()
_G.uiMgr = require('ui_mgr'):new()
_G.sceneMgr = require('scene_mgr'):new()

_G.update = require('update_util'):new()

-- Http测试代码
-- local data =
--     pb:encode(
--     'http.rpc',
--     {
--         router = 'test',
--         test = {}
--     }
-- )

-- local bytes = luaBytesToCsBytes(stringToBytes(data))

-- HttpUtil.Instance:PostAsyn(
--     System.Net.HttpWebRequest.Create(System.Uri('http://127.0.0.1:8200')),
--     bytes,
--     System.Action_HttpResult(
--         function(result)
--             local d = bytesToString(csBytesToLuaBytes(result.bytes))
--             local dataPack = pb:decode('http.rpc', d)
--             local router = dataPack.router
--             local data = dataPack[router]
--             print(router, '>>>', data)
--         end
--     )
-- )

-- Socket测试代码
-- local client = SocketClient('127.0.0.1', 8100)
-- client.OnReceive =
--     client.OnReceive +
--     System.Action_SocketDataPack(
--         function(dataPack)
--             local d = bytesToString(csBytesToLuaBytes(dataPack.Data))
--             local dataPack = pb:decode('socket.rpc', d)
--             local router = dataPack.router
--             local data = dataPack[router]
--             print('接收到数据', router, '>>>', data)
--         end
--     )
-- client:Connect(
--     function()
--         print('连接成功')
--         -- 编辑器环境下停止关闭连接
--         broadcast:on(
--             BROADCAST_CODE.MONO_QUIT,
--             function()
--                 client:Close()
--             end
--         )
--         -- 发送测试数据
--         local data =
--             pb:encode(
--             'socket.rpc',
--             {
--                 router = 'test',
--                 test = {}
--             }
--         )
--         local bytes = luaBytesToCsBytes(stringToBytes(data))
--         client:Send(0x1001, bytes, nil)
--     end,
--     function()
--         print('连接失败')
--     end
-- )
