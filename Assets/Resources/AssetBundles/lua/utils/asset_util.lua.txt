local AssetUtil = class('Asset')
local CSAssetUtil = _G.AssetUtil.Instance
function AssetUtil:_load(type, key, assetName)
    local asset = CSAssetUtil:LoadAsset(typeof(type), key, assetName)
    return asset
end
function AssetUtil:_loadAsync(type, key, assetName, cb)
    CSAssetUtil:LoadAssetAsync(
        typeof(type),
        key,
        assetName,
        System.Action_UnityEngine_Object(
            function(asset)
                cb(asset)
            end
        )
    )
end

function AssetUtil:loadString(key, assetName)
    local asset = self:_load(UE.Object, key, assetName, true)
    if (asset == nil) then
        return nil
    end
    local str = asset:ToString()
    self:unloadAsset(asset)
    return str
end
function AssetUtil:loadStringAsync(key, assetName, cb)
    self:_loadAsync(
        UE.Object,
        key,
        assetName,
        function(asset)
            if (asset == nil) then
                cb(nil)
                return
            end
            local str = asset:ToString()
            -- 异步直接卸载时容易出现并发问题，暂不自动卸载
            -- self:unloadAsset(asset)
            cb(str)
        end,
        true
    )
end

function AssetUtil:loadPrefab(key, assetName)
    return self:_load(UE.GameObject, key, assetName)
end
function AssetUtil:loadPrefabAsync(key, assetName, cb)
    self:_loadAsync(UE.GameObject, key, assetName, cb)
end
function AssetUtil:loadSprite(key, assetName)
    return self:_load(UE.Sprite, key, assetName)
end
function AssetUtil:loadSpriteAsync(key, assetName, cb)
    self:_loadAsync(UE.Sprite, key, assetName, cb)
end
function AssetUtil:loadAnimator(key, assetName)
    return self:_load(UE.RuntimeAnimatorController, key, assetName)
end
function AssetUtil:loadAnimatorAsync(key, assetName, cb)
    self:_loadAsync(UE.RuntimeAnimatorController, key, assetName, cb)
end
function AssetUtil:unloadAsset(asset)
    CSAssetUtil:UnloadAsset(asset)
end
return AssetUtil
